{
    // Vanilla JS

    "Instantiable Object (Constructor + Prototype)": {
        "prefix": "object-constructor-instantiable",
        "body": [
            "function ${1:MyObject}($2){",
            "\t$3",
            "}",
            "",
            "$1.prototype = {",
            "\t$0",
            "};"
        ],
        "description": "Instantiable prototype-style object"
    },

    "Prototype Method": {
        "prefix": "object-method-prototype",
        "body": [
            "${1:myMethod}: function($2) {",
            "\t$0",
            "},"
        ],
        "description": "Method for a prototype-style object"
    },

    // Classes

    "Class": {
        "prefix": "class",
        "body": [
            "class ${1:ClassName}${2: extends ${3:ParentClass}}{",
            "\t${4:// Class logic here}",
            "}"
        ],
        "description": "Core class setup"
    },

    "Class Constructor": {
        "prefix": "class-constructor-ctor",
        "body": [
            "constructor(${1:parameters}){",
            "\t${2:// Constructor logic goes here}",
            "}"
        ],
        "description": "Class constructor"
    },

    "Class Method": {
        "prefix": "class-method",
        "body": [
            "${1:methodName}(${2:parameters}){",
            "\t${3:// Logic goes here}",
            "}"
        ],
        "description": "Class method"
    },

    // Promises

    "New Promise": {
        "prefix": "new-promise",
        "body": [
            "new Promise(function(resolve, reject){",
            "\t$0",
            "});"
        ],
        "description": "Create a new promise"
    },

    "Promise then": {
        "prefix": "promise-then",
        "body": [
            ".then(function(${1:result}){",
            "\t$0",
            "})"
        ],
        "description": "Promise then function call"
    },

    "Promise catch": {
        "prefix": "promise-catch",
        "body": [
            ".catch(function(error){",
            "\t$0",
            "});"
        ],
        "description": "Promise catch function call"
    },

    "Promise returning call": {
        "prefix": "promise-returning-function-call",
        "body": [
            "${1:functionName}(${2:parameters})",
            ".then(function(${3:result}){",
            "\t$0",
            "})",
            ".catch(function(error){ console.log(error); });"
        ],
        "description": "Promise handling for an async, promise returning function call"
    },

    // Inquirer snippets

    "Inquirer Prompt": {
        "prefix": "inquirer-prompt",
        "body": [
            "inquirer.prompt([",
            "\t$1",
            "])${2|;,\n.then((resultData) => {\n\t\n});|}"
        ],
        "description": "Inquirer prompt call"
    },
    "Inquirer Question Options": {
        "prefix": "inquirer-question-definition",
        "body": [
            "{",
            "\tname: '${1:propertyName}',",
            "\tmessage: '${2:Prompt displayed to the user}',",
            "${3:\tvalidate: ($1) => {\n\t${4://function body here}\n\t\\}}",
            "}"
        ],
        "description": "Inquirer question definition"
    },
    "Inquirer List Options": {
        "prefix": "inquirer-list-definition",
        "body": [
            "{",
            "\tname: '${1:propertyName}',",
            "\tmessage: '${2:Prompt displayed to the user}',",
            "\ttype: 'list',",
            "\tchoices: [\n\t\t${3:'Choice strings'}\n\t]",
            "}"
        ],
        "description": "Inquirer list definition"
    },

    // Express snippets

    "Express App Setup": {
        "prefix": "express-app-setup",
        "body": [
            "const express = require('express');",
            "",
            "const app = express();",
            "const PORT = ${1:8080}"
        ],
        "description": "Express app setup block"
    },
    "Express Parser Middleware": {
        "prefix": "express-middleware-body-parse-json",
        "body": [
            "app.use(express.urlencoded({ extended: true }));",
            "app.use(express.json());"
        ],
        "description": "Body parsing middleware for JSON and URL-encoded data"
    },
    "Express Handlbars Require": {
        "prefix": "express-handlebars-require",
        "body": [
            "const expressHandlebars = require('express-handlebars');"
        ],
        "description": "Require the express-handlebars library"
    },
    "Express Handlebars Middleware": {
        "prefix": "express-middleware-handlebars",
        "body": [
            "app.engine('handlebars', expressHandlebars({ defaultLayout: 'main' }));",
            "app.set('view engine', 'handlebars');"
        ],
        "description": "Rendering engine setup for express-handlebars"
    },
    "Express Route": {
        "prefix": "express-route-snippet",
        "body": [
            "app.${1|get,post,put,delete|}('/${2:path}', function (request, response) {",
            "\t// get all body stuff from request.body object",
            "\t// get all request parameter stuff from request.params object",
            "\t$0",
            "\t// respond with: response.send()",
            "",
            "});"
        ],
        "description": "Express route creation something or other"
    },
    "Express App Listener": {
        "prefix": "express-listener",
        "body": [
            "app.listen(PORT, function() {",
            "\tconsole.log('listening on port ' + PORT);",
            "});"
        ],
        "description": "Add Express server listener to document"
    },
    "Express Response": {
        "prefix": "express-response",
        "body": [
            "response.${1|send,json,render,sendFile,end|}(${2:value});"
        ],
        "description": "Express send response"
    },
    "Express Route File Setup": {
        "prefix": "express-route-file-setup",
        "body": [
            "module.exports = function(app) {",
            "\t${1:// Build routes here}",
            "};"
        ],
        "description": "Setup for an express route file"
    },

    // Mongoose Snippets

    "Mongoose Model": {
        "prefix": "mongoose-model",
        "body": [
            "var mongoose = require('mongoose');",
            "var Schema = mongoose.Schema;",
            "var ${1:ModelName}Schema = new Schema({",
            "\t$0",
            "});",
            "",
            "var $1 = mongoose.model('$1', UserSchema);",
            "module.exports = $1;"
        ],
        "description": "Base mongoose model"
    },

    "Mongoose Model Property": {
        "prefix": "mongoose-model-property",
        "body": [
            "${1:propertyName}: {",
            "\ttype: ${2|String,Number,Boolean,Date|}$0",
            "},"
        ],
        "description": "Mongoose property definition"
    },

    "Mongoose Model Method": {
        "prefix": "mongoose-model-method",
        "body": [
            "${1:ModelName}Schema.methods.${2:methodName} = function() {",
            "\treturn; // Don't forget to return your value",
            "};"
        ],
        "description": "Mongoose custom method definition"
    },

    // MySQL

    "MySQL Connection Setup": {
        "prefix": "mysql-connection-setup",
        "body": [
            "const connectionConfig = {",
            "\thost: \"localhost\",",              
            "\tport: 3306,",
            "\tuser: \"${1:user}\",",
            "\tpassword: \"${2:password}\",",
            "\tdatabase: \"${3:databaseName}\"",
            "};",
            "",
            "var connection = mysql.createConnection(connectionConfig);",
            "",
            "connection.connect(function (err) {",
            "\tif (err) {",
            "\t  console.error(`error connecting: ${err.stack}`);",
            "\t  return;",
            "\t}",
            "\tconsole.log(`connected as id  ${connection.threadId}`);",
            "});"
        ],
        "description": "Create new MySQL database connection"
    },

    "MySQL Query": {
        "prefix": "mysql-query",
        "body": [
            "connection.query(",
            "\t'${1:query}',",
            "\t[${2:queryParameters}],",
            "\tfunction(error, ${3:data}) {",
            "\t\tif(error) throw error;",
            "\t\t// logic goes here",
            "\t});"
        ],
        "description": "A bare MySQL query using a callback"
    },

    "MySQL Promise-returning Query": {
        "prefix": "mysql-promise-query",
        "body": [
            "new Promise(function (resolve, reject){",
            "\tconnection.query(",
            "\t'${1:query}',",
            "\t[${2:queryParameters}],",
            "\tfunction(error, ${3:data}) {",
            "\t\t\tif(error) reject(error);",
            "\t\t\tresolve($3)",
            "\t\t});",
            "});"
        ],
        "description": "A MySQL query "
    },
    
    // Sequelize

    "Sequelize Connection Configuration": {
        "prefix": "sequelize-configure-connection",
        "body": [
            "const Sequelize = require('sequelize');",
            "",
            "const sequelize = new Sequelize('sequelize_chirpy', '${1:username}', '${2:password}', {",
            "\thost: '${3:localhost}',",
            "\tport: ${4:3306},",
            "\tdialect: 'mysql',",
            "\tpool: {",
            "\t\tmax: 5,",
            "\t\tmin: 0,",
            "\t\tidle: 10000",
            "\t}",
            "});",
            "",
            "module.exports = sequelize;"
        ],
        "description": "Sequelize connection configuration"
    },

    "Sequelize Model": {
        "prefix": "sequelize-model",
        "body": [
            "module.exports = function(sequelize, DataTypes) {",
            "\tlet ${1:ModelName} = sequelize.define('${1/^(.)(.*$)/${1:/downcase}$2/}', {",
            "\t\t$0",
            "\t});",
            "",
            "\t${2:$1.associate = function(models) {\n\n\t\\};}",
            "",
            "\treturn $1;",
            "};"
        ],
        "description": "Sequelize base model"
    },

    "Sequelize Model BelongsTo Association": {
        "prefix": "sequelize-model-belongs-to-association",
        "body": [
            "${1:ModelName}.belongsTo(models.${2:AssociatedModelName}, {",
            "\tforeignKey: {",
            "\t\tallowNull: ${3|true,false|}",
            "\t}",
            "});"
        ],
        "description": "Sequelize BelongsTo association definition"
    },

    "Sequelize Model HasMany Association": {
        "prefix": "sequelize-model-has-many-association",
        "body": [
            "${1:ModelName}.hasMany(models.${2:AssociatedModelName}, {",
            "\t$0",
            "});"
        ],
        "description": "Sequelize HasMany association definition"
    },

    "Sequelize Model Property": {
        "prefix": "sequelize-model-property",
        "body": [
            "title: {",
            "\ttype: DataTypes.STRING$0",
            "},"
        ],
        "description": "Sequelize property definition"
    },

    "Sequelize Find": {
        "prefix": "sequelize-find-read-select",
        "body": [
            "${1:ModelName}.${2|findAll,findOne|}(${3:{ where: { ${4:columnName}: ${5:value} } }})",
            ".then(function(${6:result}){",
            "\t${0://logic here}",
            "})",
            ".catch(function(error){ console.log(error); });"
        ],
        "description": "Sequelize Find Behavior"
    },

    "Sequelize Create": {
        "prefix": "sequelize-create-insert",
        "body": [
            "${1:ModelName}.create({",
            "\t${2:propertiesHere}",
            "})",
            ".then(function(${3:result}){",
            "\t${0://logic here}",
            "})",
            ".catch(function(error){ console.log(error); });"
        ],
        "description": "Sequelize Create Behavior"
    },

    "Sequelize Update": {
        "prefix": "sequelize-update",
        "body": [
            "${1:ModelName}.create({",
            "\t${2:propertiesHere}",
            "},",
            "{",
            "\twhere: {${3:columnName}: ${4:value}}",
            "})",
            ".then(function(${5:result}){",
            "\t${0://logic here}",
            "})",
            ".catch(function(error){ console.log(error); });"
        ],
        "description": "Sequelize Update Behavior"
    },

    "Sequelize Destroy": {
        "prefix": "sequelize-delete-destroy",
        "body": [
            "${1:ModelName}.delete(${2:{ where: { ${3:columnName}: ${4:value} } }})",
            ".then(function(${5:result}){",
            "\t${0://logic here}",
            "})",
            ".catch(function(error){ console.log(error); });"
        ],
        "description": "Sequelize Destroy Behavior"
    },

    // Mocha Test snippets

    "Mocha Setup Or Teardown": {
        "prefix": "mocha-before-after-each-setup-teardown",
        "body": [
            "${1|beforeEach,afterEach,before,after|}(function(){",
            "$2",
            "});"
        ],
        "description": "Mocha Before and After blocks"
    },
    "Mocha Describe Suite Setup": {
        "prefix": "mocha-describe-suite",
        "body": [
            "describe('${1:describe test suite to run}', function () {",
            "$2",
            "});"
        ],
        "description": "Mocha 'describe' suite setup"
    },
    "Mocha It Test Setup": {
        "prefix": "mocha-it-test",
        "body": [
            "it('${1:describe expectation}', function () {",
            "\t$2",
            "});"
        ],
        "description": "Mocha 'it' test setup"
    },
    "Arrange/Act/Assert": {
        "prefix": "arrange-act-assert",
        "body": [
            "// Arrange",
            "// Define the initial program state",
            "$1",
            "",
            "// Act",
            "// Call the method to run the behavior",
            "$2",
            "",
            "// Assert",
            "// Verify (assert) your expectation matches reality",
            "$3"
        ],
        "description": "AAA - Arrange/Act/Assert"
    },

    //Chai assertion snippets

    "Chai Require": {
        "prefix": "chai-require",
        "body": [
            "const { ${1|assert,expect|} } = require('chai');"
        ],
        "description": ""
    },
    "Chai Assert Outcome": {
        "prefix": "chai-assert-outcome",
        "body": [
            "assert.${1|equal,strictEqual,throws,doesNotThrow|}(${1:actualResult}, ${2:expectedResult});"
        ],
        "description": "Chai assertion of test outcomes"
    },
    "Chai Expect Outcome": {
        "prefix": "chai-expect-outcome",
        "body": [
            "expect(${1:actualResult}).${2|to,to.not|}.${3|equal,strictEqual,throw|}(${4:expectedResult});"
        ],
        "description": "Chai assertion of test outcomes"
    }
}
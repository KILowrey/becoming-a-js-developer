{
    // Vanilla JS

    "Instantiable Object (Constructor + Prototype)": {
        "prefix": "object-constructor-instantiable",
        "body": [
            "function ${1:MyObject}($2){",
            "\t$3",
            "}",
            "",
            "$1.prototype = {",
            "\t$0",
            "};"
        ],
        "description": "Instantiable prototype-style object"
    },

    "Prototype Method": {
        "prefix": "object-method-prototype",
        "body": [
            "${1:myMethod}: function($2) {",
            "\t$0",
            "},"
        ],
        "description": "Method for a prototype-style object"
    },

    // Inquirer snippets

    "Inquirer Prompt": {
        "prefix": "inquirer-prompt",
        "body": [
            "inquirer.prompt([",
            "\t$1",
            "])${2|;,\n.then((resultData) => {\n\t\n});|}"
        ],
        "description": "Inquirer prompt call"
    },
    "Inquirer Question Options": {
        "prefix": "inquirer-question-definition",
        "body": [
            "{",
            "\tname: '${1:propertyName}',",
            "\tmessage: '${2:Prompt displayed to the user}',",
            "${3:\tvalidate: ($1) => {\n\t${4://function body here}\n\t\\}}",
            "}"
        ],
        "description": "Inquirer question definition"
    },
    "Inquirer List Options": {
        "prefix": "inquirer-list-definition",
        "body": [
            "{",
            "\tname: '${1:propertyName}',",
            "\tmessage: '${2:Prompt displayed to the user}',",
            "\ttype: 'list',",
            "\tchoices: [\n\t\t${3:'Choice strings'}\n\t]",
            "}"
        ],
        "description": "Inquirer list definition"
    },

    // Express snippets

    "Express Parser Middleware": {
        "prefix": "express-middleware-body-parse-json",
        "body": [
            "app.use(express.urlencoded({ extended: true }));",
            "app.use(express.json());"
        ],
        "description": "Body parsing middleware for JSON and URL-encoded data"
    },
    "Express Route": {
        "prefix": "express-route-snippet",
        "body": [
            "app.${1|get,post,put,delete|}('/${2:path}', function (request, response) {",
            "    // get all body stuff from request.body object",
            "    // get all request parameter stuff from request.params object",
            "    $0",
            "    // respond with: response.send()",
            "",
            "});"
        ],
        "description": "Express route creation something or other"
    },
    "Express App Listener": {
        "prefix": "express-listener",
        "body": [
            "app.listen(PORT, function() {",
            "    console.log('listening on port ' + PORT);",
            "});"
        ],
        "description": "Add Express server listener to document"
    },

    // Mongoose Snippets

    "Mongoose Model": {
        "prefix": "mongoose-model",
        "body": [
            "var mongoose = require('mongoose');",
            "var Schema = mongoose.Schema;",
            "var ${1:ModelName}Schema = new Schema({",
            "\t$0",
            "});",
            "",
            "var $1 = mongoose.model('$1', UserSchema);",
            "module.exports = $1;"
        ],
        "description": "Base mongoose model"
    },

    "Mongoose Model Property": {
        "prefix": "mongoose-model-property",
        "body": [
            "${1:propertyName}: {",
            "\ttype: ${2|String,Number,Boolean,Date|}$0",
            "},"
        ],
        "description": "Mongoose property definition"
    },

    "Mongoose Model Method": {
        "prefix": "mongoose-model-method",
        "body": [
            "${1:ModelName}Schema.methods.${2:methodName} = function() {",
            "\treturn; // Don't forget to return your value",
            "};"
        ],
        "description": "Mongoose custom method definition"
    },

    // MySQL

    "MySQL Connection Setup": {
        "prefix": "mysql-connection-setup",
        "body": [
            "const connectionConfig = {",
            "    host: \"localhost\",",              
            "    port: 3306,",
            "    user: \"${1:user}\",",
            "    password: \"${2:password}\",",
            "    database: \"${3:databaseName}\"",
            "};",
            "",
            "var connection = mysql.createConnection(connectionConfig);",
            "",
            "connection.connect(function (err) {",
            "    if (err) {",
            "      console.error(`error connecting: ${err.stack}`);",
            "      return;",
            "    }",
            "    console.log(`connected as id  ${connection.threadId}`);",
            "});"
        ],
        "description": "Create new MySQL database connection"
    },

    "MySQL Query": {
        "prefix": "mysql-query",
        "body": [
            "connection.query(",
            "   '${1:query}',",
            "   [${2:queryParameters}],",
            "   function(error, ${3:data}) {",
            "       if(error) throw error;",
            "       // logic goes here",
            "   });"
        ],
        "description": "A bare MySQL query using a callback"
    },

    "MySQL Promise-returning Query": {
        "prefix": "mysql-promise-query",
        "body": [
            "new Promise(function (resolve, reject){",
            "   connection.query(",
            "   '${1:query}',",
            "   [${2:queryParameters}],",
            "   function(error, ${3:data}) {",
            "           if(error) reject(error);",
            "           resolve($1)",
            "       });",
            "});"
        ],
        "description": "A MySQL query "
    },
    
    // Sequelize

    "Sequelize Model": {
        "prefix": "sequelize-model",
        "body": [
            "module.exports = function(sequelize, DataTypes) {",
            "\tlet ${1:ModelName} = sequelize.define('$1', {",
            "\t\t$0",
            "\t});",
            "",
            "\t$1.associate = function(models) {",
            "",
            "\t}",
            "};"
        ],
        "description": "Sequelize base model"
    },

    "Sequelize Model BelongsTo Association": {
        "prefix": "sequelize-model-belongs-to-association",
        "body": [
            "${1:ModelName}.belongsTo(models.${2:AssociatedModelName}, {",
            "\tforeignKey: {",
            "\t\tallowNull: ${3|true,false|}",
            "\t}",
            "});"
        ],
        "description": "Sequelize BelongsTo association definition"
    },

    "Sequelize Model HasMany Association": {
        "prefix": "sequelize-model-has-many-association",
        "body": [
            "${1:ModelName}.hasMany(models.${2:AssociatedModelName}, {",
            "\t$0",
            "});"
        ],
        "description": "Sequelize HasMany association definition"
    },

    "Sequelize Model Property": {
        "prefix": "sequelize-model-property",
        "body": [
            "title: {",
            "\ttype: DataTypes.STRING$0",
            "},"
        ],
        "description": "Sequelize property definition"
    },

    // Mocha Test snippets

    "Mocha Setup Or Teardown": {
        "prefix": "mocha-before-after-each-setup-teardown",
        "body": [
            "${1|beforeEach,afterEach,before,after|}(function(){",
            "$2",
            "});"
        ],
        "description": "Mocha Before and After blocks"
    },
    "Mocha Describe Suite Setup": {
        "prefix": "mocha-describe-suite",
        "body": [
            "describe('${1:describe test suite to run}', function () {",
            "$2",
            "});"
        ],
        "description": "Mocha 'describe' suite setup"
    },
    "Mocha It Test Setup": {
        "prefix": "mocha-it-test",
        "body": [
            "it('${1:describe expectation}', function () {",
            "\t$2",
            "});"
        ],
        "description": "Mocha 'it' test setup"
    },
    "Arrange/Act/Assert": {
        "prefix": "arrange-act-assert",
        "body": [
            "// Arrange",
            "// Define the initial program state",
            "$1",
            "",
            "// Act",
            "// Call the method to run the behavior",
            "$2",
            "",
            "// Assert",
            "// Verify (assert) your expectation matches reality",
            "$3"
        ],
        "description": "AAA - Arrange/Act/Assert"
    },

    //Chai assertion snippets

    "Chai Require": {
        "prefix": "chai-require",
        "body": [
            "const { ${1|assert,expect|} } = require('chai');"
        ],
        "description": ""
    },
    "Chai Assert Outcome": {
        "prefix": "chai-assert-outcome",
        "body": [
            "assert.${1|equal,strictEqual,throws,doesNotThrow|}(${1:actualResult}, ${2:expectedResult});"
        ],
        "description": "Chai assertion of test outcomes"
    },
    "Chai Expect Outcome": {
        "prefix": "chai-expect-outcome",
        "body": [
            "expect(${1:actualResult}).${2|to,to.not|}.${3|equal,strictEqual,throw|}(${4:expectedResult});"
        ],
        "description": "Chai assertion of test outcomes"
    }
}